//
//  MSVDraft.h
//  MovieousShortVideo
//
//  Created by Chris Wang on 2018/10/5.
//  Copyright © 2018 Movieous Team. All rights reserved.
//

#import <AVFoundation/AVFoundation.h>
#import "MSVTypeDefines.h"
#import "MSVMainTrackClip.h"
#import "MSVClip.h"
#import "MSVAudioClip.h"
#import "MSVLUTFilterEffect.h"
#import "MSVExternalFilterEffect.h"
#import "MSVImageStickerEffect.h"
#import "MSVBasicEffect.h"
#import "MSVTimeEffect.h"
#import "MSVVideoClip.h"

/**
 * @brief Video drafts, callers can generate drafts themselves or edit them arbitrarily with drafts，Then use MSVEditor to generate a preview of the draft in real time, or you can use MSVExporter to export the draft。
 */
@interface MSVDraft : NSObject
<
NSCopying
>

/**
 * @brief Indicate the background color for video display, if video has not cover the whole space whose size is assigned by the videoSize property.
 */
@property (nonatomic, strong) UIColor *backgroundColor;

/**
 * @brief The main track clip collection, the main track clip is arranged in the order of the duration specified by its durationAtMainTrack to form the main track of the video, and the length of the draft is determined by the length of the main track.
 */
@property (nonatomic, strong, readonly) NSArray<MSVMainTrackClip *> *mainTrackClips;

/**
 * @brief The audio clip collection, the audio of the draft is generated by mixing the audio in mainTrackClips and audioClips according to their respective volume.
 */
@property (nonatomic, strong, readonly) NSArray<MSVAudioClip *> *audioClips;

/**
 * @brief The video clip collection, the visual part of the video is generated by mixing the video in mainTrackClips and videoClips according to the location of these clips.
 */
@property (nonatomic, strong, readonly) NSArray<MSVVideoClip *> *videoClips;

/**
 * @brief Basic effects collection，so far we support MSVExternalFilterEffect, MSVLUTFilterEffect, MSVImageEffect, all of these effects will be used on the main track.
 */
@property (nonatomic, strong, readonly) NSArray<id<MSVBasicEffect>> *basicEffects;

/**
 * @brief Time effects collection，so far we support MSVRepeatEffect, MSVSpeedEffect, all of these effects will be used on the main track and video clips.
 */
@property (nonatomic, strong, readonly) NSArray<id<MSVTimeEffect>> *timeEffects;

/**
 * @brief The original total duration of the draft (regardless of time effects, regardless of timeRange)
 */
@property (nonatomic, assign, readonly) NSTimeInterval originalDuration;

/**
 * @brief Draft duration in total (take time effects into account, regardless of timeRange)
 */
@property (nonatomic, assign, readonly) NSTimeInterval duration;

/**
 * @brief The size of the video. If the size of the window does not match the size of the videoSize when previewing,Scaling depends on method specified by editor.previewScalingMode
 */
@property (nonatomic, assign) CGSize videoSize;

/**
 * @brief Valid time area, other parts will be ignored
 * @warning The time interval here is the interval after the time effect is applied,if timeRange was setup by callers, after the main track was relevantly operated like added, deleted, or time effects, the timeRange should be adjusted to ensure that the correct time range is applied.
 */
@property (nonatomic, assign) MovieousTimeRange timeRange;

/**
 * @brief Initialize a draft using the audio and video file address, and the initial draft will contain an address that the MSVMainTrackClip points to.
 * @param URL Audio and video file address
 * @param outError If an error occurs, return the error that occurred
 * @return Initialized successful draft object
 */
+ (instancetype)draftWithAVURL:(NSURL *)URL error:(NSError **)outError;

/**
 * @brief Create a draft object in using the image file address, and the initial draft will contain an address that the MSVMainTrackClip points to.
 * @param URL Image file address
 * @param outError If an error occurs, return the error that occurred
 * @return If the creation is successful, the draft object is returned, otherwise returns nil
 */
+ (instancetype)draftWithImageURL:(NSURL *)URL error:(NSError **)outError;

/**
 * @brief Initialize the draft object
 * @param mainTrackClipType The Main track segment type
 * @param URL The Main track segment address
 * @param outError If an error occurs, return the error that occurred
 * @return If the initialization is successful, the draft object is returned, otherwise returns nil
 */
- (instancetype)initWithMainTrackClipType:(MSVMainTrackClipType)mainTrackClipType URL:(NSURL *)URL error:(NSError **)outError;

/**
 * @brief Generate a preview screenshot of the draft
 * @param count The number of Preview screenshots
 * @param withinTimeRange Whether to generate screenshots in the range of timeRange only
 * @param handler Callback after complete，timestamp：screenshot timostamp，snapshot：Screen capture，error：An error that occurs
 */
- (void)generateSnapshotsWithCount:(NSUInteger)count withinTimeRange:(BOOL)withinTimeRange completionHanler:(void (^)(NSTimeInterval timestamp, UIImage *snapshot, NSError *error))handler;

/**
 * @brief Update the main track clip set. Non-Readonly parameters can be adjusted directly in related objects. Other operations (add, delete, replace, etc.) need to be refreshed using this interface.
 * @param mainTrackClips The new main track clip set
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returns YES, invalid operation returns NO
 */
- (BOOL)updateMainTrackClips:(NSArray<MSVMainTrackClip *> *)mainTrackClips error:(NSError **)outError;

/**
 * @brief Update the video clips. Non-Readonly parameters can be adjusted directly in related objects. Other operations (add, delete, replace, etc.) need to be refreshed using this interface.
 * @param videoClips The new videoClips
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returns YES, invalid operation returns NO
 */
- (BOOL)updateVideoClips:(NSArray<MSVVideoClip *> *)videoClips error:(NSError **)outError;

/**
 * @brief Update audio clip sets, non-readonly parameters can be adjusted directly in related objects, other operations (add, delete, replace, etc.) need to use this interface to refresh
 * @param audioClips The new audio clip sets
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returns YES, invalid operation returns NO
 */
- (BOOL)updateAudioClips:(NSArray<MSVAudioClip *> *)audioClips error:(NSError **)outError;

/**
 * @brief Update effect sets
 * @param basicEffects the new effect sets
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returnsYES, invalid operation return NO
 */
- (BOOL)updateBasicEffects:(NSArray<id<MSVBasicEffect>> *)basicEffects error:(NSError **)outError;

/**
 * @brief Update effect sets
 * @param timeEffects the new time effect sets
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returnsYES, invalid operation return NO
 */
- (BOOL)updateTimeEffects:(NSArray<id<MSVTimeEffect>> *)timeEffects error:(NSError **)outError;

/**
 * @brief Verify that the current draft is valid or not
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returnsYES, invalid operation return NO
 */
- (BOOL)validateForRecorderWithError:(NSError **)outError;

/**
 * @brief Verify that the draft is valid or not
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation returnsYES, invalid operation return NO
 */
- (BOOL)validateForWithError:(NSError **)outError;

/**
 * @brief The operation of updating the volume is performed in real time. When you need to modify the volume of many clips in batches, please call this method to improve the efficiency of the operation,then make the relevant volume modification, and finally call the -commitVolumeChange method to submit the changes.If you do not follow this paradigm, an update operation will be triggered each time when you modify volume, which will result in:
 */
- (void)beginVolumeChangeTransaction;

/**
 * @brief Submit volume update
 */
- (BOOL)commitVolumeChangeWithError:(NSError **)outError;

/**
 * @brief In addition to the volume updating, you can call this method to start a transaction when you need to manipulate the related properties in batches, and then call the -commitChangeWithError: method to commit all changes after all the operations are completed.
 */
- (void)beginChangeTransaction;

/**
 * @brief Cancel current batch update transaction
 */
- (void)cancelChangeTransaction;

/**
 * @brief Submit an update to the general properties
 */
- (BOOL)commitChangeWithError:(NSError **)outError;

/**
 * @brief Tool method, applying time effects to the original time point, mapping to the time point after applying the time effect
 * @param time Time point when no time effects are applied
 * @return Time point after applying time effects
 */
- (NSTimeInterval)applyEffectToTime:(NSTimeInterval)time;

/**
 * @brief Tool method, which maps the time point when the time effect has been applied to the time point when the time effect is removed
 * @param time Time point when the time effect has been applied
 * @return Time point after removing the time effect
 */
- (NSTimeInterval)removeEffectFromTime:(NSTimeInterval)time;

/**
 * @brief Tool method, applying time effects to the original time interval, mapping to the time interval after applying the time effect
 * @param timeRange Time interval when no time effects are applied
 * @return Time interval after applying time effects
 */
- (MovieousTimeRange)applyEffectToTimeRange:(MovieousTimeRange)timeRange;

/**
 * @brief Tool method that maps the time interval in which the time effect has been applied to the time interval in which the time effect is removed
 * @param timeRange Time interval after applying time effects
 * @return Time interval after removing the time effect
 */
- (MovieousTimeRange)removeEffectFromTimeRange:(MovieousTimeRange)timeRange;

@end
