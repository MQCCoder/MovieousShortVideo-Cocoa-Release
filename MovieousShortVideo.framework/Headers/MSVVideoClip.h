//
//  MSVVideoClip.h
//  MovieousShortVideo
//
//  Created by Chris Wang on 2019/3/1.
//  Copyright © 2019 Movieous Team. All rights reserved.
//

#import "MSVClip.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * @brief Type of video clip
 */
typedef NS_ENUM(NSInteger, MSVVideoClipType) {
    /**
     * Audio and video media resource type
     */
    MSVVideoClipTypeAV,
    /**
     * Image resource type
     */
    MSVVideoClipTypeImage
};

@interface MSVVideoClip : NSObject
<
MSVClip
>

/**
 * @brief User-defined ID field, business usage is used to distinguish objects
 */
@property (nonatomic, strong) NSString *ID;

/**
 * @brief Type of video clip
 */
@property (nonatomic, assign, readonly) MSVVideoClipType type;

/**
 * @brief Media clip URL, only local file is supported
 */
@property (nonatomic, strong, readonly) NSURL *URL;

/**
 * @brief Time range on main track in draft
 */
@property (nonatomic, assign) MovieousTimeRange timeRangeAtMainTrack;

/**
 * @brief The frame in the source video spece which will be used to display in destination video
 */
@property (nonatomic, assign) CGRect sourceDisplayFrame;

/**
 * @brief The angle you want to rotate the display area, rotation will be applied after the source video has been placed correctly in the destDisplayFrame.
 */
@property (nonatomic, assign) float rotateAngle;

/**
 * @brief The frame in destination video space you want to place the source display video.
 */
@property (nonatomic, assign) CGRect destDisplayFrame;

/**
 * @brief The scaling mode you want to use if the aspect ratio of sourceDisplayFrame and destDisplayFrame are not equal.
 */
@property (nonatomic, assign) MovieousScalingMode scalingMode;

// The following parameters are only valid for the video clip of the MSVVideoClipTypeAV type
#pragma mark - video properties
/**
 * @brief The AVAsset object generated by the audio and video media files, you can get some required parameters here.
 */
@property (nonatomic, strong, readonly) AVAsset *asset;

/**
 * @brief Intercepting the time range that used in the media clip.
 * @warning This time range refers to the time range without the fast and slow processing and reverses processing,Also, if timeRange.startTime + timeRange.duration > total media duration,  the excess part will be ignored.
 */
@property (nonatomic, assign) MovieousTimeRange timeRange;

/**
 * @brief Speed of the audio clip
 * Generally, the following configuration can be performed：
 * Extremely fast：2.0
 * Fast：1.5
 * Standard：1.0
 * Slow：0.75
 * Extremely slow：0.5
 */
@property (nonatomic, assign) float speed;

/**
 * @brief The volume of the media audio, defaults to the preferredVolume that comes with the media file.
 */
@property (nonatomic, assign) float volume;

/**
 * @brief Begin apply reverse effect to this clip
 * @discussion Reverse operation may take some time for the first time, you can psss `progressHandler` to get operation progress, pass `completionHandler` to get operation result. After reverse operation has completed for the first time, apply again will take effect immediately.
 * @param reverse Reverse or not
 * @param progressHandler Operation progress callback, parameter `progress` is operation progress ranges from 0 ~ 1
 * @param completionHandler error 为 nil。Operation result callback, if error comes out, error object will convey the error.
 */
- (void)setReverse:(BOOL)reverse progressHandler:(void(^)(float progress))progressHandler completionHandler:(void(^)(NSError *error))completionHandler;

/**
 * @brief Cancel the running reverse process
 * @warning Cancel reverse operation there is not recover previoud reversed video, if you want to clear applied reverse effect, call `-setReverse:progressHandler:completionHandler:` and pass NO to parameter `reverse`
 */
- (void)cancelReverse;

/**
 * @brief Whether to playback the video backforward
 */
@property (nonatomic, assign, readonly) BOOL reverse;

// The following parameters are only valid for the video clip of the MSVVideoClipTypeImage type
#pragma mark - image properties
/**
 * @brief Image object
 */
@property (nonatomic, assign, readonly) UIImage *image;

/**
 * @brief Create a video clip
 * @param type The type of video clip
 * @param URL The file path of the video clip supports local files only
 * @param outError If an error occurs, return the error that occurred
 * @return If the creation is successful, the completed object is returned, otherwise returns nil
 */
+ (instancetype)videoClipWithType:(MSVVideoClipType)type URL:(NSURL *)URL error:(NSError **)outError;

/**
 * @brief 使用 AVAsset Create the video clip of audio and video type using AVAsset
 * @param asset AVAsset object used to create the video clip
 * @param outError If an error occurs, return the error that occurred
 * @return If the creation is successful, the completed object is returned, otherwise returns nil
 */
+ (instancetype)videoClipWithAsset:(AVAsset *)asset error:(NSError **)outError;

/**
 * @brief Create a video clip of a image type using UIImage
 * @param image UIImage object used to create the video clip
 * @param outError If an error occurs, return the error that occurred
 * @return If the creation is successful, the completed object is returned, otherwise returns nil
 */
+ (instancetype)videoClipWithImage:(UIImage *)image duration:(NSTimeInterval)duration error:(NSError **)outError;

/**
 * @brief Initialize a video clip
 * @param type Type of video clip
 * @param URL The file path of the video clip supports local files only
 * @param outError If an error occurs, return the error that occurred
 * @return If the initialization is successful, the completed object is returned, otherwise returns nil
 */
- (instancetype)initWithType:(MSVVideoClipType)type URL:(NSURL *)URL error:(NSError **)outError;

/**
 * @brief Initialize a video clip of an audio and video type using AVAsset
 * @param asset AVAsset object used to create the video clip
 * @param outError If an error occurs, return the error that occurred
 * @return If the initialization is successful, the completed object is returned, otherwise returns nil
 */
- (instancetype)initWithAsset:(AVAsset *)asset error:(NSError **)outError;

/**
 * @brief Initialize a video clip of a image type using UIImage
 * @param image UIImage object used to create the video clip
 * @param duration Image duration
 * @param outError If an error occurs, return the error that occurred
 * @return If the initialization is successful, the completed object is returned, otherwise returns nil
 */
- (instancetype)initWithImage:(UIImage *)image duration:(NSTimeInterval)duration error:(NSError **)outError;

/**
 * @brief Verify that the video clip is valid or not
 * @param outError If an error occurs, return the error that occurred
 * @return Valid operation return YES, invalid operation return NO
 */
- (BOOL)validateWithError:(NSError **)outError;

/**
 * @brief Refresh inner Asset objects，need to be called when received `AVAudioSessionMediaServicesWereResetNotification` notification
 */
- (void)refreshAsset;

@end

NS_ASSUME_NONNULL_END
